module.exports = [{"title":"any","since":"v0.6.0","category":"Array","syntax":"any(fn, x)","usage":{"commonjs":{"title":"CommonJs","code":"const any = require('dusty-fns/any');"},"standard":{"title":"Standard","code":"import any from 'dusty-fns/any';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/any/index.js\"></script>"}},"desc":"Loops through a provided list verifying that any value evaluates to a truthy value.","examples":["const data = [1, 2, 3, 4];\r\rany(x => x > 0, data); // => true\rany(x => x < 3); // => true\rany(x => x < 0, data); // => false\r\r// It is also curried\r\rconst run = any(x => x > 0);\r\rrun([1, 2, 3]); // => true\rrun([-1, 0, 1]); // => true\rrun([-3, -2, -1]); // => false"],"params":[{"type":{"names":["function"]},"description":"The function to send our values to for validation","name":"fn"},{"type":{"names":["Array"]},"description":"The list we are to loop through","name":"x"}],"returns":[{"type":{"names":["Boolean"]},"description":"If any values passed will return true else false"}]},{"title":"clone","since":"v0.1.0","category":"Object","syntax":"clone(x)","usage":{"commonjs":{"title":"CommonJs","code":"const clone = require('dusty-fns/clone');"},"standard":{"title":"Standard","code":"import clone from 'dusty-fns/clone';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/clone/index.js\"></script>"}},"desc":"Shallow clone an object or array","examples":["const obj = clone({things: 1}); // => { things: 1 }\rconst arr = clone([1, 2, 3]); // => [1, 2, 3]"],"params":[{"type":{"names":["Object"]},"description":"The object that should be cloned","name":"x"}],"returns":[{"type":{"names":["Object"]},"description":"Returns the shallow clone of the object"}]},{"title":"complement","since":"v0.6.0","category":"Logic","syntax":"complement(pred, a)","usage":{"commonjs":{"title":"CommonJs","code":"const complement = require('dusty-fns/complement');"},"standard":{"title":"Standard","code":"import complement from 'dusty-fns/complement';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/complement/index.js\"></script>"}},"desc":"Takes a function and returns a new function that when called returns the opposite truthy/falsy value of\rwhat was passed in.","examples":["const isNot = complement(is(String));\r\risNot(1); // => true\risNot('test'); // => false"],"params":[{"type":{"names":["function"]},"description":"The function we want to apply the complement of","name":"pred"},{"type":{"names":["Any"]},"description":"The value our functionality is being ran against","name":"a"}],"returns":[{"type":{"names":["function"]},"description":"Returns the opposite function back"}]},{"title":"compress","since":"v0.3.0","category":"Object","syntax":"compress(x)","usage":{"commonjs":{"title":"CommonJs","code":"const compress = require('dusty-fns/compress');"},"standard":{"title":"Standard","code":"import compress from 'dusty-fns/compress';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/compress/index.js\"></script>"}},"desc":"Takes an object and compresses it down removing falsy and empty values","examples":["const obj = compress({ thing: '', test: 1 }); // => { test: 1 }"],"params":[{"type":{"names":["Object"]},"description":"The Object to compress","name":"x"}],"returns":[{"type":{"names":["Object"]},"description":"Returns a new object without the unwanted values"}]},{"title":"contains","since":"v0.5.0","category":"Collection","syntax":"contains(a, list)","usage":{"commonjs":{"title":"CommonJs","code":"const contains = require('dusty-fns/contains');"},"standard":{"title":"Standard","code":"import contains from 'dusty-fns/contains';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/contains/index.js\"></script>"}},"desc":"Checks to see if the provided list contains at at least 1 of the provided value within it","examples":["contains(3, [1, 2, 3]); // => true\rcontains({ value: 1 }, [{ value: 1 }, { value: 2 }]); // => true\rcontains([42], [[42]]); // => true\r\r// It is also curried\r\rconst checker = contains(3);\r\rchecker([1, 2, 3]); // => true"],"params":[{"type":{"names":["Any"]},"description":"The value we want to search the list for","name":"a"},{"type":{"names":["Array"]},"description":"The list we want to search through","name":"list"}],"returns":[{"type":{"names":["Boolean"]},"description":"A Boolean based on if the value is found or not"}]},{"title":"curry","since":"v0.1.0","category":"Function","syntax":"curry(f, args)","usage":{"commonjs":{"title":"CommonJs","code":"const curry = require('dusty-fns/curry');"},"standard":{"title":"Standard","code":"import curry from 'dusty-fns/curry';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/curry/index.js\"></script>"}},"desc":"Create a curried function","examples":["const add = curry((a, b) => a + b);\radd(1)(2); // => 3\radd(1, 2); // => 3"],"params":[{"type":{"names":["function"]},"description":"The function we will be running","name":"f"},{"type":{"names":["Any"]},"description":"extra args to apply if needed","name":"args"}],"returns":[{"type":{"names":["Any"]},"description":"Returns based on the function sent in"}]},{"title":"deepClone","since":"v0.1.0","category":"Function","syntax":"deepClone(x)","usage":{"commonjs":{"title":"CommonJs","code":"const deepClone = require('dusty-fns/deepClone');"},"standard":{"title":"Standard","code":"import deepClone from 'dusty-fns/deepClone';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/deepClone/index.js\"></script>"}},"desc":"Clones the object sent in (Hard Clone)","examples":["const cloned = deepClone({ test: 1 }) // => { test: 1 }"],"params":[{"type":{"names":["Object"]},"description":"The object we want to get cloned","name":"x"}],"returns":[{"type":{"names":["Object"]},"description":"Returns the cloned object back"}]},{"title":"defaults","since":"v0.5.0","category":"Object","syntax":"defaults(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const defaults = require('dusty-fns/defaults');"},"standard":{"title":"Standard","code":"import defaults from 'dusty-fns/defaults';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/defaults/index.js\"></script>"}},"desc":"Applies default properties to an object that does not contain the smae or contains falsey values on those properties","examples":["const data = { thing: 4 };\r\rdefaults({ test: 1, thing: 2 }, data); // => { test: 1, thing: 4 }"],"params":[{"type":{"names":["Object"]},"description":"The default object to reference","name":"a"},{"type":{"names":["Object"]},"description":"The data object to loop through","name":"b"}],"returns":[{"type":{"names":["Object"]},"description":"A New object"}]},{"title":"empty","since":"v0.1.0","category":"Function","syntax":"empty(x)","usage":{"commonjs":{"title":"CommonJs","code":"const empty = require('dusty-fns/empty');"},"standard":{"title":"Standard","code":"import empty from 'dusty-fns/empty';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/empty/index.js\"></script>"}},"desc":"Empties out the items of the sent value","examples":["const obj = empty({ test: 1 }); // => {}\rconst arr = empty([1, 2, 3]); // => []\rconst str = empty('test'); // => ''"],"params":[{"type":{"names":["*"]},"description":"The item to empty","name":"x"}],"returns":[{"type":{"names":["*"]},"description":"Returns the empty item"}]},{"title":"ensureArray","since":"v1.0.0","category":"Array","syntax":"ensureArray(x)","usage":{"commonjs":{"title":"CommonJs","code":"const ensureArray = require('dusty-fns/ensureArray');"},"standard":{"title":"Standard","code":"import ensureArray from 'dusty-fns/ensureArray';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/ensureArray/index.js\"></script>"}},"desc":"Ensures that the value passed in is an array, if not it will make it an array or\rpass back an empty array if the value if undefined/null","examples":["ensureArray(1); // => [1]\rensureArray(); // => []\rensureArray(null); // => []\rensureArray('test'); // => ['test']"],"params":[{"type":{"names":["Any"]},"description":"The value to ensure","name":"x"}],"returns":[{"type":{"names":["Array"]},"description":"Returns a new array"}]},{"title":"every","since":"v0.6.0","category":"Array","syntax":"every(fn, x)","usage":{"commonjs":{"title":"CommonJs","code":"const every = require('dusty-fns/every');"},"standard":{"title":"Standard","code":"import every from 'dusty-fns/every';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/every/index.js\"></script>"}},"desc":"Loops through a provided list verifying that every value evaluates to a truthy value.","examples":["const data = [1, 2, 3, 4];\r\revery(x => x > 0, data); // => true\revery(x => x < 3); // => false\r\r// It is also curried\r\rconst run = every(x => x > 0);\r\rrun([1, 2, 3]); // => true\rrun([-1, 0, 1]); // => false"],"params":[{"type":{"names":["function"]},"description":"The function to send our values to for validation","name":"fn"},{"type":{"names":["Array"]},"description":"The list we are to loop through","name":"x"}],"returns":[{"type":{"names":["Boolean"]},"description":"If all values passed will return true else false"}]},{"title":"extend","since":"v0.1.0","category":"Object","syntax":"extend(args)","usage":{"commonjs":{"title":"CommonJs","code":"const extend = require('dusty-fns/extend');"},"standard":{"title":"Standard","code":"import extend from 'dusty-fns/extend';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/extend/index.js\"></script>"}},"desc":"Create a new object from the provided objects in the parameters","examples":["const obj = extend({ test: 1 }, { thing: 2 }); // => { test: 1, thing: 2 }"],"params":[{"type":{"names":["Object"]},"description":"The object(s) we want to combine","name":"args"}],"returns":[{"type":{"names":["Object"]},"description":"A new Object"}]},{"title":"filter","since":"v0.5.0","category":"Array","syntax":"filter(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const filter = require('dusty-fns/filter');"},"standard":{"title":"Standard","code":"import filter from 'dusty-fns/filter';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/filter/index.js\"></script>"}},"desc":"Filter through a filterable data piece using the provided function","examples":["const isEven = n => n % 2 === 0;\r\rfilter(isEven, [1, 2, 3, 4]); // => [2, 4]\r\r// Is also curried\r\rconst filterer = filter(isEven);\r\rfilterer([1, 2, 3, 4]); // => [2, 4]"],"params":[{"type":{"names":["function"]},"description":"The predicate function to run on our values","name":"fn"},{"type":{"names":["Array","Object"]},"description":"The filterable list to go through","name":"list"}],"returns":[{"type":{"names":["Array","Object"]},"description":"Returns a new Array or Object based on the type of list provided"}]},{"title":"find","since":"v0.2.0","category":"Array","syntax":"find(f, x)","usage":{"commonjs":{"title":"CommonJs","code":"const find = require('dusty-fns/find');"},"standard":{"title":"Standard","code":"import find from 'dusty-fns/find';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/find/index.js\"></script>"}},"desc":"Find an item based on the function sent in and its list","examples":["const obj = find(v => v.val === 'test', {val: 'test'}); // => 'test'\rconst arr = find(v => v.val === 'test', [{val: 'test'}, {val: 'none'}]); // => { val: 'test' }\r\r// find is also curried\r\rconst finder = find(v => v.val === 'test');\r\rfinder({val: 'test'}); // => 'test'\rfinder([{val: 'test'}, {val: 'none'}]); // => { val: 'test' }"],"params":[{"type":{"names":["function"]},"description":"The function used/called during the find","name":"f"},{"type":{"names":["Object"]},"description":"The list we want to search through","name":"x"}],"returns":[{"type":{"names":["Any"]},"description":"Returns either the found item, or false if nothing is found"}]},{"title":"first","since":"v0.4.0","category":"Array","syntax":"first(x)","usage":{"commonjs":{"title":"CommonJs","code":"const first = require('dusty-fns/first');"},"standard":{"title":"Standard","code":"import first from 'dusty-fns/first';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/first/index.js\"></script>"}},"desc":"Grabs the first index of a passed array or string","examples":["const arr = first([1, 3]); // => 1\rconst str = first('abc'); // => 'a'"],"params":[{"type":{"names":["Array","String"]},"description":"The list or string we want to use","name":"x"}],"returns":[{"type":{"names":["Any"]},"description":"Returns whatever was the first piece of our array"}]},{"title":"flatten","since":"v0.4.0","category":"Array","syntax":"flatten(list)","usage":{"commonjs":{"title":"CommonJs","code":"const flatten = require('dusty-fns/flatten');"},"standard":{"title":"Standard","code":"import flatten from 'dusty-fns/flatten';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/flatten/index.js\"></script>"}},"desc":"Flattens an array to a single level","examples":["const results = flatten( [[1, 2, 3], [4, 5, 6]] ); // => [1, 2, 3, 4, 5, 6]\nconst results = flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n// => [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]"],"params":[{"type":{"names":["Array"]},"description":"The array list we want to flatten into a single level array","name":"list"}],"returns":[{"type":{"names":["Array"]},"description":"Returns an array flattened to a single level"}]},{"title":"fuzzySearch","since":"v0.3.0","category":"Function","syntax":"fuzzySearch(h, n)","usage":{"commonjs":{"title":"CommonJs","code":"const fuzzySearch = require('dusty-fns/fuzzySearch');"},"standard":{"title":"Standard","code":"import fuzzySearch from 'dusty-fns/fuzzySearch';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/fuzzySearch/index.js\"></script>"}},"desc":"Fuzzy search setup to look find things fast and effective","examples":["const results = fuzzySearch('test', 'te'); // => true\nconst results = fuzzySearch('testing', 'dog'); // => false\n\n// search is also curried\n\nconst searcher = fuzzySearch('test');\nconst results = searcher('te'); // => true"],"params":[{"type":{"names":["String"]},"description":"The value to search for","name":"h"},{"type":{"names":["String"]},"description":"The Item to search","name":"n"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns a boolean determined by if the value is found or not by the search"}]},{"title":"has","since":"v0.2.0","category":"Object","syntax":"has(prop, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const has = require('dusty-fns/has');"},"standard":{"title":"Standard","code":"import has from 'dusty-fns/has';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/has/index.js\"></script>"}},"desc":"Determines if the object has a property","examples":["const obj = has('thing', { test: 1, thing: 2 }); // => true\r\r// has is also curried\r\rconst propSet = has('thing');\r\rpropSet({ test: 1, thing: 2 }); // => true"],"params":[{"type":{"names":["String"]},"description":"The prop to look for","name":"prop"},{"type":{"names":["Object"]},"description":"The Object we are searching","name":"obj"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns based on if the prop is found or not"}]},{"title":"identical","since":"v0.1.0","category":"Relation","syntax":"identical(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const identical = require('dusty-fns/identical');"},"standard":{"title":"Standard","code":"import identical from 'dusty-fns/identical';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/identical/index.js\"></script>"}},"desc":"Performs a check to see if the items are identical in the sense that they reference the same memory","examples":["const obj = identical(NaN, NaN); // => true\r\r// Identical is also curried\r\rconst test = identical(NaN); // => Gives back a function\rtest(NaN); // => true"],"params":[{"type":{"names":["Any"]},"description":"The first value to compare","name":"a"},{"type":{"names":["Any"]},"description":"The second value to compare","name":"b"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns a boolean based on the check"}]},{"title":"is","since":"v0.5.0","category":"Function","syntax":"is(Ctor, x)","usage":{"commonjs":{"title":"CommonJs","code":"const is = require('dusty-fns/is');"},"standard":{"title":"Standard","code":"import is from 'dusty-fns/is';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/is/index.js\"></script>"}},"desc":"See if an object is an instance of the supplied constructor, this will also check up the inheritence chain","examples":["is(Object, {}); // => true\nis(Array, []); // => true\nis(String, ''); // => true\nis(Number, 0); // => true\nis(Boolean, true); // => true\nis(Function, a => a); // => true\nis(RegExp, /[0-9]/g); // => true\n\n// It is curried as well\n\nconst isObject = is(Object);\n\nisObject({}); // => true\n\n// Gotchas\n// Since it is a light check you need to watch how you run into sitatuions like this\nis(Object, {}); // => true\nis(Object, []); // => true"],"params":[{"type":{"names":["Object"]},"description":"A Constructor","name":"Ctor"},{"type":{"names":["*"]},"description":"The value to test","name":"x"}],"returns":[{"type":{"names":["Boolean"]}}]},{"title":"isEmpty","since":"v0.1.0","category":"Function","syntax":"isEmpty(x)","usage":{"commonjs":{"title":"CommonJs","code":"const isEmpty = require('dusty-fns/isEmpty');"},"standard":{"title":"Standard","code":"import isEmpty from 'dusty-fns/isEmpty';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/isEmpty/index.js\"></script>"}},"desc":"Determines if the entered value is empty or not","examples":["const arr = isEmpty([]); // => true\rconst obj = isEmpty({}); // => true\rconst str = isEmpty(''); // => true\rconst num = isEmpty(0); // => true"],"params":[{"type":{"names":["Any"]},"description":"Value to check against","name":"x"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns the boolean after running our check"}]},{"title":"isEqual","since":"v0.1.0","category":"Relation","syntax":"isEqual(a, b)","usage":{"commonjs":{"title":"CommonJs","code":"const isEqual = require('dusty-fns/isEqual');"},"standard":{"title":"Standard","code":"import isEqual from 'dusty-fns/isEqual';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/isEqual/index.js\"></script>"}},"desc":"Takes and compares two items. Capable of handling cyclical data structures","examples":["const obj = isEqual({}, {}); // => true\rconst arr = isEqual([], []); // => true"],"params":[{"type":{"names":["Any"]},"description":"First item to compare","name":"a"},{"type":{"names":["Any"]},"description":"Second item to compare","name":"b"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns the boolean after running our comparison check"}]},{"title":"isNil","since":"v1.0.0","category":"Relation","syntax":"isNil(x)","usage":{"commonjs":{"title":"CommonJs","code":"const isNil = require('dusty-fns/isNil');"},"standard":{"title":"Standard","code":"import isNil from 'dusty-fns/isNil';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/isNil/index.js\"></script>"}},"desc":"Checks if the value is a null value","examples":["isNill(null); // => true\risNill(); // => true\risNill(1); // => false"],"params":[{"type":{"names":["Any"]},"description":"The value to run our test against","name":"x"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns a boolean based on the check"}]},{"title":"juxt","since":"v0.5.0","category":"Function","syntax":"juxt(fns)","usage":{"commonjs":{"title":"CommonJs","code":"const juxt = require('dusty-fns/juxt');"},"standard":{"title":"Standard","code":"import juxt from 'dusty-fns/juxt';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/juxt/index.js\"></script>"}},"desc":"Applies the provided function and turns them into a single function you can use on a value","examples":["const getRange = juxt(Math.min, Math.max);\r\rgetRange(3, 4, 9, -3); // => [-3, 9]"],"params":[{"type":{"names":["function"]},"description":"The functions to apply","name":"fns"}],"returns":[{"type":{"names":["function"]},"description":"The function you can use on your data value"}]},{"title":"last","since":"v0.1.0","category":"Array","syntax":"last(x)","usage":{"commonjs":{"title":"CommonJs","code":"const last = require('dusty-fns/last');"},"standard":{"title":"Standard","code":"import last from 'dusty-fns/last';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/last/index.js\"></script>"}},"desc":"Grabs the last index of an array","examples":["const arr = last([1, 3]); // => 3\rconst str = last('abc'); // => 'c'"],"params":[{"type":{"names":["Array","String"]},"description":"The list or string we want to use","name":"x"}],"returns":[{"type":{"names":["Any"]},"description":"Returns whatever was the last piece of our array"}]},{"title":"map","since":"v0.6.0","category":"Array","syntax":"map(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const map = require('dusty-fns/map');"},"standard":{"title":"Standard","code":"import map from 'dusty-fns/map';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/map/index.js\"></script>"}},"desc":"Takes a function and applies it to all of the values within the provided list,\rand brings back a new list of the same type.","examples":["const dbl = n => n * 2;\r\rmap(dbl, [1, 2, 3]); // => [2, 4, 6]\r\r// It's also curried\r\rconst dbler = map(dbl);\r\rdbler([1, 2, 3]); // => [2, 4, 6]"],"params":[{"type":{"names":["function"]},"description":"The function to run against the values in our functor","name":"fn"},{"type":{"names":["Array","Object"]},"description":"The list to iterate through","name":"list"}],"returns":[{"type":{"names":["Array","Object"]},"description":"The new Array or Object that was created"}]},{"title":"max","since":"v1.0.0","category":"Array","syntax":"max(x)","usage":{"commonjs":{"title":"CommonJs","code":"const max = require('dusty-fns/max');"},"standard":{"title":"Standard","code":"import max from 'dusty-fns/max';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/max/index.js\"></script>"}},"desc":"Goes through an array of values and grabs the last value of the array when it's been sorted","examples":["max([1, 3, 2, 5, 4]); // => 5\rmax(['c', 'a', 'b', 'f']); // => 'f'"],"params":[{"type":{"names":["Array"]},"description":"The Array to sort and grab from","name":"x"}],"returns":[{"type":{"names":["Any"]},"description":"Returns the item at the end of an array based on what's passed in"}]},{"title":"mean","since":"v0.1.0","category":"Array","syntax":"mean(x)","usage":{"commonjs":{"title":"CommonJs","code":"const mean = require('dusty-fns/mean');"},"standard":{"title":"Standard","code":"import mean from 'dusty-fns/mean';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/mean/index.js\"></script>"}},"desc":"Get the mean of a set of numbers","examples":["mean([1, 2, 3, 2]); // => 2\rmean([]); // => NaN\rmean(); // => NaN"],"params":[{"type":{"names":["Array"]},"description":"An amount of numbers to get the mean from","name":"x"}],"returns":[{"type":{"names":["Number"]},"description":"Returns the mean avg of the numbers"}]},{"title":"min","since":"v1.0.0","category":"Array","syntax":"min(x)","usage":{"commonjs":{"title":"CommonJs","code":"const min = require('dusty-fns/min');"},"standard":{"title":"Standard","code":"import min from 'dusty-fns/min';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/min/index.js\"></script>"}},"desc":"Goes through an array of values and grabs the first value of the array when it's been sorted","examples":["min([1, 3, 2, 5, 4]); // => 1\rmin(['c', 'a', 'b', 'f']); // => 'a'"],"params":[{"type":{"names":["Array"]},"description":"The Array to sort and grab from","name":"x"}],"returns":[{"type":{"names":["Any"]},"description":"Returns the item at the start of an array based on what's passed in"}]},{"title":"not","since":"v0.1.0","category":"Logic","syntax":"not(x)","usage":{"commonjs":{"title":"CommonJs","code":"const not = require('dusty-fns/not');"},"standard":{"title":"Standard","code":"import not from 'dusty-fns/not';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/not/index.js\"></script>"}},"desc":"Returns boolean based on if the value is not","examples":["const reverse = not(true); // => false"],"params":[{"type":{"names":["Boolean"]},"description":"The values to compare against","name":"x"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns boolean back based on the results"}]},{"title":"nth","since":"v0.1.0","category":"Array","syntax":"nth(o, x)","usage":{"commonjs":{"title":"CommonJs","code":"const nth = require('dusty-fns/nth');"},"standard":{"title":"Standard","code":"import nth from 'dusty-fns/nth';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/nth/index.js\"></script>"}},"desc":"Returns the nth element of the given list or string.","examples":["const i = nth(3, [1, 2, 3, 4, 5, 6, 7]); // => 4\r\r// nth is curried\r\rconst third = nth(2);\r\rthird([1, 2, 3, 4, 5]); // => 3"],"params":[{"type":{"names":["Number"]},"description":"How much to offset the value","name":"o"},{"type":{"names":["String","Array"]},"description":"The Array or list to crawl through","name":"x"}],"returns":[{"type":{"names":["String","Number"]},"description":"Returns the value of the found index"}]},{"title":"omit","since":"v0.4.0","category":"Object","syntax":"omit(key, x)","usage":{"commonjs":{"title":"CommonJs","code":"const omit = require('dusty-fns/omit');"},"standard":{"title":"Standard","code":"import omit from 'dusty-fns/omit';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/omit/index.js\"></script>"}},"desc":"Create a new Array/Object by omitting the requested values","examples":["const obj = omit('test', { test: '3432', thing: 123 }); // => { thing: 123 }\rconst arr = omit(['a', 'b'], { a: 1, b: 2, c: 3}); // => { c: 3 }\r\r// omit is curried\r\rconst omitKeys = omit('test');\r\romitKeys({ test: '3432', thing: 123 }); // => { thing: 123 }"],"params":[{"type":{"names":["String"]},"description":"The key(s) in which to omit from the data","name":"key"},{"type":{"names":["Object"]},"description":"The array or object to search through","name":"x"}],"returns":[{"type":{"names":["Object"]},"description":"Returns the newly created data without the omitted values"}]},{"title":"partition","since":"v0.5.0","category":"Collection","syntax":"partition(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const partition = require('dusty-fns/partition');"},"standard":{"title":"Standard","code":"import partition from 'dusty-fns/partition';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/partition/index.js\"></script>"}},"desc":"Takes a predicate function and a list or filterable data object and returns the pair.\rOne contains the data which passed the predicate function, the other the values that did not.","examples":["partition(is(String), ['foo', 'bar', 100]); // => [ ['foo', 'bar'], [100] ]\rpartition(is(String), { a: 'foo', b: 'bar', c: 100 }); // => [ ['foo', 'bar'], [100] ]\r\r// Is curried as well\r\rconst part = partition(is(String));\r\rpart(['foo', 'bar', 100]); // => [ ['foo', 'bar'], [100] ]\rpart({ a: 'foo', b: 'bar', c: 100 }); // => [ ['foo', 'bar'], [100] ]"],"params":[{"type":{"names":["function"]},"description":"The predicate function to determine which side an element belongs to","name":"fn"},{"type":{"names":["Array"]},"description":"The list or other filterable to partition through","name":"list"}],"returns":[{"type":{"names":["Array"]},"description":"An array containing the first set of elements that passed the predicate function,\rAnd a second that did not"}]},{"title":"pluck","since":"v0.6.0","category":"Collection","syntax":"pluck(p, list)","usage":{"commonjs":{"title":"CommonJs","code":"const pluck = require('dusty-fns/pluck');"},"standard":{"title":"Standard","code":"import pluck from 'dusty-fns/pluck';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/pluck/index.js\"></script>"}},"desc":"Returns a new list by finding and grabbing the same named properties off all objects supplied","examples":["pluck(0, [[1, 2], [3, 4]]); // => [1, 3]\npluck('val', { a: { val: 3 }, b: { val: 5 } }); // => { a: 3, b: 5 }\n\n// It is also curried\nconst plucker = pluck('a');\n\nplucker([{ a: 1 }, { a: 2 }]); // => [1, 2]"],"params":[{"type":{"names":["String"]},"description":"The property to look for","name":"p"},{"type":{"names":["Array","Object"]},"description":"The list to iterate through","name":"list"}],"returns":[{"type":{"names":["Array","Object"]},"description":"The new list which will be the same type as the list provided"}]},{"title":"prepend","since":"v0.5.0","category":"Array","syntax":"prepend(x, list)","usage":{"commonjs":{"title":"CommonJs","code":"const prepend = require('dusty-fns/prepend');"},"standard":{"title":"Standard","code":"import prepend from 'dusty-fns/prepend';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/prepend/index.js\"></script>"}},"desc":"Returns a new list with the provided value at the front of the given list","examples":["const i = nth(3, [1, 2, 3, 4, 5, 6, 7]); // => 4\n\n// nth is curried\n\nconst third = nth(2);\n\nthird([1, 2, 3, 4, 5]); // => 3"],"params":[{"type":{"names":["Any"]},"description":"The value we want to put at the front of our list","name":"x"},{"type":{"names":["Array"]},"description":"The Array or list to prepend to","name":"list"}],"returns":[{"type":{"names":["Array"]},"description":"A new array"}]},{"title":"prop","since":"v0.6.0","category":"Object","syntax":"prop(p, obj)","usage":{"commonjs":{"title":"CommonJs","code":"const prop = require('dusty-fns/prop');"},"standard":{"title":"Standard","code":"import prop from 'dusty-fns/prop';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/prop/index.js\"></script>"}},"desc":"Brings back the indicated property of an object if it exists","examples":["prop('thing', { thing: 'test' }); // => 'test'\rprop('thing', {}); // => undefined\r\r// It is also curried\r\rconst proper = prop('a');\r\rproper({ a: 1, b: 2 }); // => 1"],"params":[{"type":{"names":["Array"]},"description":"The array path of the property we are looking for","name":"p"},{"type":{"names":["Object"]},"description":"The object to search through","name":"obj"}],"returns":[{"type":{"names":["Any"]},"description":"The value that exists at 'obj.p'"}]},{"title":"range","since":"v0.1.0","category":"Function","syntax":"range(from, to)","usage":{"commonjs":{"title":"CommonJs","code":"const range = require('dusty-fns/range');"},"standard":{"title":"Standard","code":"import range from 'dusty-fns/range';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/range/index.js\"></script>"}},"desc":"Create an array range from start to end","examples":["const test = range(3, 7); // => [3, 4, 5, 6]\rconst test = range(3); // => [0, 1, 2];"],"params":[{"type":{"names":["Number"]},"description":"Starting number for the range","name":"from"},{"type":{"names":["Number"]},"description":"Number to end on for the range","name":"to"}],"returns":[{"type":{"names":["Array"]},"description":"Returns an array of numbers consisting of the range"}]},{"title":"reject","since":"v0.5.0","category":"Collection","syntax":"reject(fn, list)","usage":{"commonjs":{"title":"CommonJs","code":"const reject = require('dusty-fns/reject');"},"standard":{"title":"Standard","code":"import reject from 'dusty-fns/reject';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/reject/index.js\"></script>"}},"desc":"Filter through a filterable data piece using the provided function returns only those that fail the function test","examples":["const isEven = n => n % 2 === 0;\r\rreject(isEven, [1, 2, 3, 4]); // => [1, 3]\r\r// Is also curried\r\rconst rejecter = reject(isEven);\r\rrejecter([1, 2, 3, 4]); // => [1, 3]"],"params":[{"type":{"names":["function"]},"description":"The predicate function to run on our values","name":"fn"},{"type":{"names":["Array","Object"]},"description":"The filterable list to go through","name":"list"}],"returns":[{"type":{"names":["Array","Object"]},"description":"Returns a new Array or Object based on the type of list provided"}]},{"title":"removeAtIndex","since":"v0.1.0","category":"Array","syntax":"removeAtIndex(i, x)","usage":{"commonjs":{"title":"CommonJs","code":"const removeAtIndex = require('dusty-fns/removeAtIndex');"},"standard":{"title":"Standard","code":"import removeAtIndex from 'dusty-fns/removeAtIndex';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/removeAtIndex/index.js\"></script>"}},"desc":"Remove an item from a certain point in the index","examples":["const test = removeAtIndex(2, [1, 2, 3, 4]); // => [1, 2, 4]\r\r// This is also a curried method\r\rconst remover = removeAtIndex(2);\rconst test = remover([1, 2, 3, 4]); // => [1, 2, 4]"],"params":[{"type":{"names":["Number"]},"description":"The index number to remove from","name":"i"},{"type":{"names":["Array"]},"description":"The array in question","name":"x"}],"returns":[{"type":{"names":["Array"]},"description":"returns the modified array back"}]},{"title":"replaceAtIndex","since":"v0.1.0","category":"Array","syntax":"replaceAtIndex(i, t, x)","usage":{"commonjs":{"title":"CommonJs","code":"const replaceAtIndex = require('dusty-fns/replaceAtIndex');"},"standard":{"title":"Standard","code":"import replaceAtIndex from 'dusty-fns/replaceAtIndex';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/replaceAtIndex/index.js\"></script>"}},"desc":"Add an item to an array within a certain index of the array","examples":["const test = replaceAtIndex(2, 10, [1, 2, 3]); // => [1, 2, 10]\r\r// You can also use it as a curried method\r\rconst replacer = replaceAtIndex(2, 10);\r\rconst test = replacer([1, 2, 3]); // => [1, 2, 10]\r\r// This can be taken further like so\r\rconst index = replaceAtIndex(2);\rconst val = index(10);\rconst test = val([1, 2, 3]); // => [1, 2, 10]"],"params":[{"type":{"names":["Number"]},"description":"The index number to add at","name":"i"},{"type":{"names":["Any"]},"description":"What we want to add to our array","name":"t"},{"type":{"names":["Array"]},"description":"The array in question","name":"x"}],"returns":[{"type":{"names":["Array"]},"description":"Returns the modified array"}]},{"title":"type","since":"v0.1.0","category":"Function","syntax":"type(x)","usage":{"commonjs":{"title":"CommonJs","code":"const type = require('dusty-fns/type');"},"standard":{"title":"Standard","code":"import type from 'dusty-fns/type';"},"browser":{"title":"Browser","code":"<script src=\"path/to/dusty-fns/type/index.js\"></script>"}},"desc":"Finds the type of the sent value","examples":["type({}); // => 'Object'\rtype([]); // => 'Array'\rtype(null); // => 'Null'\rtype(undefined); // => 'Undefined'\rtype('hi'); // => 'String'\rtype(1); // => 'Number'\rtype(/1/g); // => 'RegExp'\rtype(new Date()); // => 'Date'\rtype(true); // => 'Boolean'"],"params":[{"type":{"names":["Any"]},"description":"The value to test","name":"x"}],"returns":[{"type":{"names":["String"]},"description":"Returns the string of the value type"}]}]